generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/**
 * =========================
 * ENUMS
 * =========================
 */

enum Role {
  ADMIN
  CREATOR
  CUSTOMER
}

enum AddressType {
  RESIDENTIAL
  COMMERCIAL
  SHIPPING
  BILLING
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  PICPAY
  MERCADOPAGO
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PAID
  FAILED
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  CANCELED
  EXPIRED
  TRIAL
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

/**
 * =========================
 * USERS & AUTH
 * =========================
 */

model Users {
  id               String        @id @default(cuid())
  name             String
  email            String        @unique
  avatarUrl        String?
  passwordHash     String
  role             Role
  socialLogins     SocialLogin[]
  deletedAccountAt DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  creatorProfile  Creator?
  customerProfile Customer?

  addresses Address[]
  consents  Consent[]
  auditLogs AuditLog[]

  @@index([role])
}

model SocialLogin {
  id         String @id @default(cuid())
  provider   String
  providerId String
  userId     String
  user       Users  @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
  @@index([userId])
}

/**
 * =========================
 * CREATOR
 * =========================
 */

model Creator {
  id               String               @id @default(cuid())
  userId           String               @unique
  user             Users                @relation(fields: [userId], references: [id])
  bio              String               @default("")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  payoutConfig     CreatorPayoutConfig?
  socialLinks      CreatorSocialLink[]
  orders           Order[]
  SubscriptionPlan SubscriptionPlan[]
}

model CreatorSocialLink {
  id        String  @id @default(cuid())
  creatorId String
  provider  String
  url       String
  creator   Creator @relation(fields: [creatorId], references: [id])

  @@unique([creatorId, provider])
  @@index([creatorId])
}

model CreatorPayoutConfig {
  id         String          @id @default(cuid())
  creatorId  String          @unique
  provider   PaymentProvider
  externalId String
  metadata   Json?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  creator Creator  @relation(fields: [creatorId], references: [id])
  payouts Payout[]
}

/**
 * =========================
 * CUSTOMER
 * =========================
 */

model Customer {
  id     String @id @default(cuid())
  userId String @unique
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  defaultAddressId String?  @unique
  defaultAddress   Address? @relation("CustomerDefaultAddress", fields: [defaultAddressId], references: [id], onDelete: SetNull)

  paymentMethods PaymentMethod[]
  orders         Order[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

/**
 * =========================
 * ADDRESS
 * =========================
 */

model Address {
  id     String @id @default(cuid())
  userId String
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  type       AddressType
  street     String
  number     String?
  complement String?
  district   String?
  city       String
  state      String
  postalCode String
  country    String      @default("BR")

  Customer Customer? @relation("CustomerDefaultAddress")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, type])
}

/**
 * =========================
 * PAGAMENTOS
 * =========================
 */

model PaymentMethod {
  id            String          @id @default(cuid())
  customerId    String
  customer      Customer        @relation(fields: [customerId], references: [id])
  provider      PaymentProvider
  providerToken String
  brand         String?
  last4         String?
  expMonth      Int?
  expYear       Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([customerId])
  @@index([provider])
}

model Order {
  id           String        @id @default(cuid())
  customerId   String
  customer     Customer      @relation(fields: [customerId], references: [id])
  creatorId    String?
  creator      Creator?      @relation(fields: [creatorId], references: [id])
  amountCents  Int
  currency     String        @default("BRL")
  description  String?
  status       PaymentStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@index([customerId])
  @@index([creatorId])
}

model Transaction {
  id           String          @id @default(cuid())
  orderId      String
  order        Order           @relation(fields: [orderId], references: [id])
  provider     PaymentProvider
  providerTxId String          @unique
  status       PaymentStatus
  amountCents  Int
  currency     String          @default("BRL")
  rawPayload   Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([orderId])
  @@index([provider, providerTxId])
}

model Payout {
  id                    String              @id @default(cuid())
  creatorPayoutConfigId String
  payoutConfig          CreatorPayoutConfig @relation(fields: [creatorPayoutConfigId], references: [id])
  status                PayoutStatus        @default(PENDING)
  amountCents           Int
  currency              String              @default("BRL")
  scheduledAt           DateTime?
  processedAt           DateTime?
  providerPayoutId      String?             @unique
  rawPayload            Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([creatorPayoutConfigId, status])
}

/**
 * =========================
 * LGPD: CONSENT & AUDIT
 * =========================
 */

model Consent {
  id        String    @id @default(cuid())
  userId    String
  user      Users     @relation(fields: [userId], references: [id])
  purpose   String
  granted   Boolean   @default(true)
  grantedAt DateTime  @default(now())
  revokedAt DateTime?

  @@unique([userId, purpose])
  @@index([userId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  user      Users?   @relation(fields: [userId], references: [id])
  actor     String?
  action    String
  entity    String?
  entityId  String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([userId, action])
}

/**
 * =========================
 * SUBSCRIPTION
 * =========================
 */

model SubscriptionPlan {
  id              String          @id @default(cuid())
  creatorId       String
  creator         Creator         @relation(fields: [creatorId], references: [id])
  name            String
  description     String?
  price           Int
  currency        String          @default("BRL")
  billingInterval BillingInterval
  trialDays       Int?
  features        Json
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id         String             @id @default(cuid())
  customerId String
  customer   Customer           @relation(fields: [customerId], references: [id])
  planId     String
  plan       SubscriptionPlan   @relation(fields: [planId], references: [id])
  status     SubscriptionStatus @default(PENDING)
  startDate  DateTime           @default(now())
  endDate    DateTime?
  renewalAt  DateTime?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([customerId])
  @@index([planId])
  @@index([status])
}
